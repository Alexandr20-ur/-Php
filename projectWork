# -Php
<?php
   // Основы PHP
     
   //Строковая переменная
   echo hello.'</br>';

   $string = 'Hello';
   echo $string.'</br>';

   //Целочисленная переменная
   echo 100 .'</br>';

   $integer = 100;
   echo $integer.'</br>';

   //Переменная дробного типа
   echo 100.1 .'</br>';

   $float = 100.1;
   echo $float.'</br>';

   //константа

   define('PI', 3.14);
   echo PI.'</br>';

   //число в восьмериной нотации
   echo 0123 .'</br>';

   $a = 0123;
   echo $a.'</br>';

   //число в шестнадцатеричной нотации
   echo 0x1A .'</br>';

   $b = 0x1A; // 26 в десятичной системе
   echo $b.'</br>';
   echo '</br>';

   /*3. Выведите в восьмеричной системе числа от 10 до 20 (echo 010; echo 011; echo 012; …
echo 019; echo 020;) Объясните результат. */

   echo 010 .'</br>';
   echo 011 .'</br>';
   echo 012 .'</br>';
   echo 013 .'</br>';
   echo 014 .'</br>';
   echo 015 .'</br>';
   echo 016 .'</br>';
   echo 017 .'</br>';
   //echo 018; - вызовет ошибку, т.к в восьмеричной системе используются числа от 0 до 7. 
   //echo 019;
   echo 020 .'</br>';
   echo '</br>';

  /* 4. Выведите 16 чисел в шестнадцатеричной системе, так чтобы в браузере отобразилось
«0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15» */
   echo 0001 .'</br>';
   echo 0002 .'</br>';
   echo 0003 .'</br>';
   echo 0004 .'</br>';
   echo 0005 .'</br>';
   echo 0006 .'</br>';
   echo 0007 .'</br>';
   echo 0x08 .'</br>';
   echo 0x09 .'</br>';
   echo 0x0A .'</br>';
   echo 0x0B .'</br>';
   echo 0x0C .'</br>';
   echo 0x0D .'</br>';
   echo 0x0E .'</br>';
   echo 0x0F .'</br>';
   echo '</br>';

   /*5. Выведите на экран любое четверостишие.
   Для каждой новой строки используйте отдельный оператор echo. Каждая строчка
должна быть отдельной строковой переменной. Также необходимо использовать
переводы строки. После четверостишия поставьте инициалы автора и выделите их
курсивом. */

   echo 'Я помню чудное мгновение:' .'</br>';
   echo 'Передо мной явилась ты,' . '</br>';
   echo 'Как мимолетное виденье,' . '</br>';
   echo 'Как гений чистой красоты.' .'</br>';
   echo '<i>А.С. Пушкин</i>';

   echo '</br>';

   //6. Выполните эти же действия, с помощью одного оператора echo.
   echo 'Я помню чудное мгновение: </br>
         Передо мной явилась ты, </br>
         Как мимолетное виденье, </br>
         Как гений чистой красоты. </br>
         <i>А.С. Пушкин</i> </br>';

   /*7. Попробуйте в выражении использовать разные типы, например, сложите число «10» и
строку «привет». Что получится? Объясните результат. */
   echo 10 .' Hello' .'</br>'; //Происходит конкатенация строк, возможно складывать числа и строки; числа и числа; строки и строки.


   /*8. Дайте ответ на вопрос, как работает оператор xor? В каких случаях он возвращает
значение true, в каких – false? Для этого напишите скрипт, который выводит значения
операций со всеми возможными вариантами операндов (4 варианта). Чему равно $a xor
$a для любых значений $a? */

   /* Оператор XOR будет возвращать значение true тогда, когда один из операндов равен истине, а другой ложный. 
      В случае, когда оба операнда истинны, оператор XOR возвращает false, в отличие от обычного оператора OR(или). */

   $a = 0001;
   $b = 0010;

   var_dump($a xor 0);
   var_dump($a xor $a);
   var_dump($a xor $b = $b xor $a);
   var_dump(($a xor $b) xor $b = $a);
    echo '</br>';
   //Ветвления и функции

   /*1. Объявите в начале скрипта две целочисленных переменных $a и $b, начальные
   значения определите с помощью констант. Написать скрипт: */
   
   define('MAX', '10');
   define('MIN', '5');

   $a = MIN;
   $b = MAX;

   if(($a && $b) > 0 ) {
      print_r ($a + $b);
   } elseif (($a && $b) < 0) {
      print_r ($a - $b);
   } else (($a < 0) && ($b > 0)) {
      print_r ($a * $b)
   };

    echo '</br>';
   //2. Выведите большее из чисел используя тернарный оператор.

    $str = 10;
    $str1 = 5;
    echo ($str < $str1) ? $str : $str;

    //3. Присвойте $а значение в промежутке [0..9]. С помощью оператора switch организуйте вывод чисел от $a до 9;

    $a = 5;

    switch ($a) {
       case 0:
          echo 0;
       break;
       case 1:
          echo 1;
       break;
       case 2:
          echo 2;
       break;
       case 3:
           echo 3;
       break;
       case 4:
         echo 4;
      break;
      case 5:
         echo 5;
      break;
      case 6:
         echo 6;
      break;
      case 7:
          echo 7;
      break;
      case 8:
         echo 8;
      break;
      case 9:
         echo 9;
      break;
      
      default:
         echo 'Совпадений не обнаружено';
      break;
    }

    //4. Реализуйте все арифметические операции в виде функций с двумя параметрами.
   
     $a = 10;
     $b = 15;

     function sum($a, $b)
     {
        return $a + $b;
     }

     function difference($a, $b)
     {
        return $a - $b;
     }

     function division($a, $b)
     {
        return $a / $b;
     }

     function multiplication($a, $b)
     {
        return $a * $b;
     }
   

     /*5. Реализуйте функцию с тремя параметрами: function mathOperation($arg1, $arg2,
$operation), где $arg1, $arg2 – значения аргументов. $operation – строка с названием
операции. В зависимости от переданного значения операции выполните одну из
арифметических операций (используйте функции из пункта 4) и верните
полученное значение (используйте switch). */

      function mathOperation($arg1, $arg2, $operation)
      {
         switch ($operation) {
            case 'сумма':
               return $arg1 + $arg2;
            case 'разность':
               return $arg1 - $arg2;
            case 'умножение':
               return $arg1 * $arg2;
            case 'деление':
               return $arg1 / $arg2;
         }
      }
      
      echo mathOperation(10, 15, 'сумма');

      /*6. С помощью рекурсии организуйте функцию возведения числа в степень. Формат:
function power($val, $pow), где $val – заданное число, $pow – степень. */

      function power($val, $pow)
      {
         if ($val == 0)
         return 0;
         elseif ($pow == 0)
         return 1;
         elseif ($pow < 0)
         return power(1/$val, -$pow);
         else
         return $val * power($val, $pow-1);
      }
      echo power(3, 2);





?>
