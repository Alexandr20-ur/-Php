# -Php
<?php
   // Основы PHP
     
   //Строковая переменная
   echo hello.'</br>';

   $string = 'Hello';
   echo $string.'</br>';

   //Целочисленная переменная
   echo 100 .'</br>';

   $integer = 100;
   echo $integer.'</br>';

   //Переменная дробного типа
   echo 100.1 .'</br>';

   $float = 100.1;
   echo $float.'</br>';

   //константа

   define('PI', 3.14);
   echo PI.'</br>';

   //число в восьмериной нотации
   echo 0123 .'</br>';

   $a = 0123;
   echo $a.'</br>';

   //число в шестнадцатеричной нотации
   echo 0x1A .'</br>';

   $b = 0x1A; // 26 в десятичной системе
   echo $b.'</br>';
   echo '</br>';

   /*3. Выведите в восьмеричной системе числа от 10 до 20 (echo 010; echo 011; echo 012; …
echo 019; echo 020;) Объясните результат. */

   echo 010 .'</br>';
   echo 011 .'</br>';
   echo 012 .'</br>';
   echo 013 .'</br>';
   echo 014 .'</br>';
   echo 015 .'</br>';
   echo 016 .'</br>';
   echo 017 .'</br>';
   //echo 018; - вызовет ошибку, т.к в восьмеричной системе используются числа от 0 до 7. 
   //echo 019;
   echo 020 .'</br>';
   echo '</br>';

  /* 4. Выведите 16 чисел в шестнадцатеричной системе, так чтобы в браузере отобразилось
«0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15» */
   echo 0001 .'</br>';
   echo 0002 .'</br>';
   echo 0003 .'</br>';
   echo 0004 .'</br>';
   echo 0005 .'</br>';
   echo 0006 .'</br>';
   echo 0007 .'</br>';
   echo 0x08 .'</br>';
   echo 0x09 .'</br>';
   echo 0x0A .'</br>';
   echo 0x0B .'</br>';
   echo 0x0C .'</br>';
   echo 0x0D .'</br>';
   echo 0x0E .'</br>';
   echo 0x0F .'</br>';
   echo '</br>';

   /*5. Выведите на экран любое четверостишие.
   Для каждой новой строки используйте отдельный оператор echo. Каждая строчка
должна быть отдельной строковой переменной. Также необходимо использовать
переводы строки. После четверостишия поставьте инициалы автора и выделите их
курсивом. */

   echo 'Я помню чудное мгновение:' .'</br>';
   echo 'Передо мной явилась ты,' . '</br>';
   echo 'Как мимолетное виденье,' . '</br>';
   echo 'Как гений чистой красоты.' .'</br>';
   echo '<i>А.С. Пушкин</i>';

   echo '</br>';

   //6. Выполните эти же действия, с помощью одного оператора echo.
   echo 'Я помню чудное мгновение: </br>
         Передо мной явилась ты, </br>
         Как мимолетное виденье, </br>
         Как гений чистой красоты. </br>
         <i>А.С. Пушкин</i> </br>';

   /*7. Попробуйте в выражении использовать разные типы, например, сложите число «10» и
строку «привет». Что получится? Объясните результат. */
   echo 10 .' Hello' .'</br>'; //Происходит конкатенация строк, возможно складывать числа и строки; числа и числа; строки и строки.


   /*8. Дайте ответ на вопрос, как работает оператор xor? В каких случаях он возвращает
значение true, в каких – false? Для этого напишите скрипт, который выводит значения
операций со всеми возможными вариантами операндов (4 варианта). Чему равно $a xor
$a для любых значений $a? */

   /* Оператор XOR будет возвращать значение true тогда, когда один из операндов равен истине, а другой ложный. 
      В случае, когда оба операнда истинны, оператор XOR возвращает false, в отличие от обычного оператора OR(или). */

   $a = 0001;
   $b = 0010;

   var_dump($a xor 0);
   var_dump($a xor $a);
   var_dump($a xor $b = $b xor $a);
   var_dump(($a xor $b) xor $b = $a);
    echo '</br>';
   //Ветвления и функции

   /*1. Объявите в начале скрипта две целочисленных переменных $a и $b, начальные
   значения определите с помощью констант. Написать скрипт: */
   
   define('MAX', '10');
   define('MIN', '5');

   $a = MIN;
   $b = MAX;

   if(($a && $b) > 0 ) {
      print_r ($a + $b);
   } elseif (($a && $b) < 0) {
      print_r ($a - $b);
   } else (($a < 0) && ($b > 0)) {
      print_r ($a * $b)
   };

    echo '</br>';
   //2. Выведите большее из чисел используя тернарный оператор.

    $str = 10;
    $str1 = 5;
    $str2 = ($str > $str1) ? $str : $str1;
    echo $str2;

    //3. Присвойте $а значение в промежутке [0..9]. С помощью оператора switch организуйте вывод чисел от $a до 9;

    $a = 5;

    switch ($a) {
       case 0:
          echo 0;
       
       case 1:
          echo 1;
       
       case 2:
          echo 2;
       
       case 3:
           echo 3;
       
       case 4:
         echo 4;
      
      case 5:
         echo 5;
      
      case 6:
         echo 6;
      
      case 7:
          echo 7;
      
      case 8:
         echo 8;
      
      case 9:
         echo 9;
      break;
      
      default:
         echo 'Совпадений не обнаружено';
      break;
    }

    //4. Реализуйте все арифметические операции в виде функций с двумя параметрами.
   
     $a = 10;
     $b = 15;

     function sum($a, $b)
     {
        return $a + $b;
     }

     function difference($a, $b)
     {
        return $a - $b;
     }

     function division($a, $b)
     {
        return $a / $b;
     }

     function multiplication($a, $b)
     {
        return $a * $b;
     }



     /*5. Реализуйте функцию с тремя параметрами: function mathOperation($arg1, $arg2,
$operation), где $arg1, $arg2 – значения аргументов. $operation – строка с названием
операции. В зависимости от переданного значения операции выполните одну из
арифметических операций (используйте функции из пункта 4) и верните
полученное значение (используйте switch). */

      function mathOperation($arg1, $arg2, $operation)
      {
         switch ($operation) {
            case 'сумма':
               return $arg1 + $arg2;
            case 'разность':
               return $arg1 - $arg2;
            case 'умножение':
               return $arg1 * $arg2;
            case 'деление':
               return $arg1 / $arg2;
         }
      }
      
      echo mathOperation(10, 15, 'сумма');

      /*6. С помощью рекурсии организуйте функцию возведения числа в степень. Формат:
function power($val, $pow), где $val – заданное число, $pow – степень. */

      function power($val, $pow)
      {
         if ($val == 0)
         return 0;
         elseif ($pow == 0)
         return 1;
         elseif ($pow < 0)
         return power(1/$val, -$pow);
         else
         return $val * power($val, $pow-1);
      }
      echo power(3, 2);

      /*7. Написать функцию, которая принимают в качестве аргументов два числа и
вычисляет из них большее. Написать такую же функцию, чтобы она вычисляла
меньшее число.
Проверить, если произведение $a и $b больше 100, но меньше 1000, то от большего
числа отнять меньшее и вывести результат на экран. А если произведение этих
чисел больше 1000, то произведение этих чисел разделить на большее из чисел.*/

     $a = 25;
     $b = 75;

     function more($a, $b)
     {
        if ($a > $b)
            return $a;
        else 
            return $b;
     }

     $more = more($a, $b);

     echo "Большее число: $more";

     function lesser($a, $b)
     {
        if ($a < $b)
            return $a;
        else 
            return $b;
     }

     $lesser = lesser($a, $b);

     echo "Меньшее число: $lesser";
    
     if (($a * $b)> 100){
        $com = $more - $lesser;
        echo "Разница равна: $com";
     } elseif (($a * $b)< 1000){
        $com = $more - $lesser;
        echo "Разница равна: $com";
     }

     if (($a * $b)> 1000){
        $com = ($a * $b) / $more;
        echo "Результат деления равен: $com";
     }


     //Циклы и массивы

     //1. С помощью цикла while выведите все числа в промежутке от 0 до 100, которые делятся на 3 без остатка.

     $a = 0;
     while ($a < 100) {
        if ($a % 3 == 0) {
           echo $a++ . ' ';
        }
        $a++;
     }

      /*2. С помощью цикла do…while напишите функцию для вывода чисел от 0 до 10,
чтобы результат выглядел так: */
 
$i = 0;
do {
    if ($i == 0) {
        echo $i . ' – это ноль.' . '<br>';
        $i++;
    } elseif ($i % 2 != 0) {
        echo $i . ' – нечетное число.' . '<br>';
        $i++;
    } else {
        echo $i . ' – четное число.' . '<br>';
        $i++;
    }
} while ($i < 11);

     /*3. Задание со звездочкой. Выведите с помощью цикла for числа от 0 до 9, НЕ
используя тело цикла. То есть выглядеть должно вот так:
for(…){// здесь пусто} */
    
   for($i = 0; $i < 10; print_r($i++)) {}

   /* 4. Объявите массив, где в качестве ключей будут использоваться названия областей, а
в качестве значений – массивы с названиями городов из соответствующей области.
Выведите в цикле значения массива, чтобы результат был таким: */

  $area = [
     'Московская область:' => ['Москва', 'Зеленоград', 'Клин'],
     'Ленинградская область:' => ['Санкт-Петербург', 'Всеволожск', 'Павловск', 'Кронштадт'],
     'Волгоградская область:' => ['Волгоград', 'Волжский', 'Камышин', 'Урюпинск', 'Иловля'],
     'Рязанская область:' => ['Рязань', 'Касимов', 'Скопин', 'Сасово', 'Михай']
  ];

     /*Задание со звездочкой. Повторите предыдущее задание, но выводите на экран
только города, начинающиеся с буквы «К». */
 
  foreach ($area as $key => $elem) {
      echo $key;
     foreach ($elem as $elem) {
        if (mb_substr($elem, 0, 1) === "К")
         echo $elem . "</br>";
     }
  }
     
    /*6. Объявите массив, индексами которого являются буквы русского языка, а
значениями – соответствующие латинские буквосочетания (‘а’=> ’a’, ‘б’ => ‘b’, ‘в’
=> ‘v’, ‘г’ => ‘g’, …, ‘э’ => ‘e’, ‘ю’ => ‘yu’, ‘я’ => ‘ya’).
Напишите функцию транслитерации строк. */

   function translit($elem)
{
   $array = array('а' => 'a',    'б' => 'b',    'в' => 'v',    'г' => 'g',    'д' => 'd',
   'е' => 'e',    'ё' => 'e',    'ж' => 'zh',   'з' => 'z',    'и' => 'i',
   'й' => 'y',    'к' => 'k',    'л' => 'l',    'м' => 'm',    'н' => 'n',
   'о' => 'o',    'п' => 'p',    'р' => 'r',    'с' => 's',    'т' => 't',
   'у' => 'u',    'ф' => 'f',    'х' => 'h',    'ц' => 'c',    'ч' => 'ch',
   'ш' => 'sh',   'щ' => 'sch',  'ь' => '',     'ы' => 'y',    'ъ' => '',
   'э' => 'e',    'ю' => 'yu',   'я' => 'ya',

   'А' => 'A',    'Б' => 'B',    'В' => 'V',    'Г' => 'G',    'Д' => 'D',
   'Е' => 'E',    'Ё' => 'E',    'Ж' => 'Zh',   'З' => 'Z',    'И' => 'I',
   'Й' => 'Y',    'К' => 'K',    'Л' => 'L',    'М' => 'M',    'Н' => 'N',
   'О' => 'O',    'П' => 'P',    'Р' => 'R',    'С' => 'S',    'Т' => 'T',
   'У' => 'U',    'Ф' => 'F',    'Х' => 'H',    'Ц' => 'C',    'Ч' => 'Ch',
   'Ш' => 'Sh',   'Щ' => 'Sch',  'Ь' => '',     'Ы' => 'Y',    'Ъ' => '',
   'Э' => 'E',    'Ю' => 'Yu',   'Я' => 'Ya');

    $elem = strtr($elem, $array);
    echo $elem . "</br>";
}
   translit('Музыка играет');

    /* 7. Напишите функцию, которая заменяет в строке пробелы на подчеркивания и
возвращает видоизмененную строчку. */
     
   function replace($replace){
      echo str_replace(" ", "_", $replace) . "</br>";
   };

   replace('пришел увидел победил');

   /*8. Объедините две ранее написанные функции в одну, которая получает строку на
русском языке, производит транслитерацию и замену пробелов на подчеркивания
(аналогичная задача решается при конструировании url-адресов на основе названия
статьи в блогах). */

function association($elem){
   $array = array('а' => 'a',    'б' => 'b',    'в' => 'v',    'г' => 'g',    'д' => 'd',
   'е' => 'e',    'ё' => 'e',    'ж' => 'zh',   'з' => 'z',    'и' => 'i',
   'й' => 'y',    'к' => 'k',    'л' => 'l',    'м' => 'm',    'н' => 'n',
   'о' => 'o',    'п' => 'p',    'р' => 'r',    'с' => 's',    'т' => 't',
   'у' => 'u',    'ф' => 'f',    'х' => 'h',    'ц' => 'c',    'ч' => 'ch',
   'ш' => 'sh',   'щ' => 'sch',  'ь' => '',     'ы' => 'y',    'ъ' => '',
   'э' => 'e',    'ю' => 'yu',   'я' => 'ya',

   'А' => 'A',    'Б' => 'B',    'В' => 'V',    'Г' => 'G',    'Д' => 'D',
   'Е' => 'E',    'Ё' => 'E',    'Ж' => 'Zh',   'З' => 'Z',    'И' => 'I',
   'Й' => 'Y',    'К' => 'K',    'Л' => 'L',    'М' => 'M',    'Н' => 'N',
   'О' => 'O',    'П' => 'P',    'Р' => 'R',    'С' => 'S',    'Т' => 'T',
   'У' => 'U',    'Ф' => 'F',    'Х' => 'H',    'Ц' => 'C',    'Ч' => 'Ch',
   'Ш' => 'Sh',   'Щ' => 'Sch',  'Ь' => '',     'Ы' => 'Y',    'Ъ' => '',
   'Э' => 'E',    'Ю' => 'Yu',   'Я' => 'Ya');

   $elem = strtr($elem, $array);
   $replace = str_replace(" ", "_", $elem);
   echo $replace . "</br>";
};
association('Привет Мир');
 
 ?>

   
